{"ast":null,"code":"var _jsxFileName = \"/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/pokedex/PokemonEntries.tsx\";\nimport React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generationMapping = {\n  '1': 'Generation I',\n  '2': 'Generation I',\n  '3': 'Generation I',\n  '4': 'Generation II',\n  '5': 'Generation II',\n  '6': 'Generation II',\n  '7': 'Generation III',\n  '8': 'Generation III',\n  '9': 'Generation III',\n  '10': 'Generation III',\n  '11': 'Generation III',\n  '12': 'Generation IV',\n  '13': 'Generation IV',\n  '14': 'Generation IV',\n  '15': 'Generation IV',\n  '16': 'Generation IV',\n  '17': 'Generation V',\n  '18': 'Generation V',\n  '19': 'Generation III',\n  '20': 'Generation III',\n  '21': 'Generation V',\n  '22': 'Generation V',\n  '23': 'Generation VI',\n  '24': 'Generation VI',\n  '25': 'Generation VI',\n  '26': 'Generation VI',\n  '27': 'Generation VII',\n  '28': 'Generation VII',\n  '29': 'Generation VII',\n  '30': 'Generation VII',\n  '31': 'Generation VII',\n  '32': 'Generation VII',\n  '33': 'Generation VIII',\n  '34': 'Generation VIII',\n  '35': 'Generation VIII',\n  '36': 'Generation VIII',\n  '37': 'Generation VIII',\n  '38': 'Generation VIII',\n  '39': 'Generation VIII',\n  '40': 'Generation IX',\n  '41': 'Generation IX',\n  '42': 'Generation IX',\n  '43': 'Generation IX'\n};\nconst capitalizeVersionName = name => {\n  return name.replace(/\\b\\w/g, char => char.toUpperCase());\n};\nconst getGeneration = versionUrl => {\n  const versionId = versionUrl.split('/').slice(-2, -1)[0];\n  return generationMapping[versionId];\n};\nconst groupEntriesByGeneration = entries => {\n  const generationGroups = {};\n  entries.forEach(entry => {\n    const generation = getGeneration(entry.version.url);\n    if (entry.language.name === 'en') {\n      if (!generationGroups[generation]) {\n        generationGroups[generation] = {};\n      }\n      const existingEntry = generationGroups[generation][entry.flavor_text];\n      if (existingEntry) {\n        existingEntry.push(entry.version.name);\n      } else {\n        generationGroups[generation][entry.flavor_text] = [entry.version.name];\n      }\n    }\n  });\n  return generationGroups;\n};\nconst PokemonEntries = ({\n  entries\n}) => {\n  const generationGroups = groupEntriesByGeneration(entries);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.entries(generationGroups).map(([generation, flavorTexts], genIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: capitalizeVersionName(generation)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(flavorTexts).map(([flavorText, versions], index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: versions.join(', ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: flavorText.replace(/\\n|\\f/g, ' ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 37\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)]\n    }, genIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_c = PokemonEntries;\nexport default PokemonEntries;\nvar _c;\n$RefreshReg$(_c, \"PokemonEntries\");","map":{"version":3,"names":["React","Table","jsxDEV","_jsxDEV","generationMapping","capitalizeVersionName","name","replace","char","toUpperCase","getGeneration","versionUrl","versionId","split","slice","groupEntriesByGeneration","entries","generationGroups","forEach","entry","generation","version","url","language","existingEntry","flavor_text","push","PokemonEntries","children","Object","map","flavorTexts","genIndex","fileName","_jsxFileName","lineNumber","columnNumber","bordered","flavorText","versions","index","join","_c","$RefreshReg$"],"sources":["/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/pokedex/PokemonEntries.tsx"],"sourcesContent":["import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { FlavorTextEntry } from '../../types';\n\ninterface PokemonEntriesProps {\n    entries: FlavorTextEntry[];\n}\n\nconst generationMapping: { [key: string]: string } = {\n    '1': 'Generation I',\n    '2': 'Generation I',\n    '3': 'Generation I',\n    '4': 'Generation II',\n    '5': 'Generation II',\n    '6': 'Generation II',\n    '7': 'Generation III',\n    '8': 'Generation III',\n    '9': 'Generation III',\n    '10': 'Generation III',\n    '11': 'Generation III',\n    '12': 'Generation IV',\n    '13': 'Generation IV',\n    '14': 'Generation IV',\n    '15': 'Generation IV',\n    '16': 'Generation IV',\n    '17': 'Generation V',\n    '18': 'Generation V',\n    '19': 'Generation III',\n    '20': 'Generation III',\n    '21': 'Generation V',\n    '22': 'Generation V',\n    '23': 'Generation VI',\n    '24': 'Generation VI',\n    '25': 'Generation VI',\n    '26': 'Generation VI',\n    '27': 'Generation VII',\n    '28': 'Generation VII',\n    '29': 'Generation VII',\n    '30': 'Generation VII',\n    '31': 'Generation VII',\n    '32': 'Generation VII',\n    '33': 'Generation VIII',\n    '34': 'Generation VIII',\n    '35': 'Generation VIII',\n    '36': 'Generation VIII',\n    '37': 'Generation VIII',\n    '38': 'Generation VIII',\n    '39': 'Generation VIII',\n    '40': 'Generation IX',\n    '41': 'Generation IX',\n    '42': 'Generation IX',\n    '43': 'Generation IX',\n};\n\nconst capitalizeVersionName = (name: string) => {\n    return name.replace(/\\b\\w/g, char => char.toUpperCase());\n};\n\nconst getGeneration = (versionUrl: string) => {\n    const versionId = versionUrl.split('/').slice(-2, -1)[0];\n    return generationMapping[versionId];\n};\n\nconst groupEntriesByGeneration = (entries: FlavorTextEntry[]) => {\n    const generationGroups: { [key: string]: { [key: string]: string[] } } = {};\n\n    entries.forEach((entry) => {\n        const generation = getGeneration(entry.version.url);\n        if (entry.language.name === 'en') {\n            if (!generationGroups[generation]) {\n                generationGroups[generation] = {};\n            }\n            const existingEntry = generationGroups[generation][entry.flavor_text];\n            if (existingEntry) {\n                existingEntry.push(entry.version.name);\n            } else {\n                generationGroups[generation][entry.flavor_text] = [entry.version.name];\n            }\n        }\n    });\n\n    return generationGroups;\n};\n\nconst PokemonEntries: React.FC<PokemonEntriesProps> = ({ entries }) => {\n    const generationGroups = groupEntriesByGeneration(entries);\n\n    return (\n        <div>\n            {Object.entries(generationGroups).map(([generation, flavorTexts], genIndex) => (\n                <div key={genIndex}>\n                    <h4>{capitalizeVersionName(generation)}</h4>\n                    <Table bordered>\n                        <tbody>\n                            {Object.entries(flavorTexts).map(([flavorText, versions], index) => (\n                                <tr key={index}>\n                                    <td>{versions.join(', ')}</td>\n                                    <td>{flavorText.replace(/\\n|\\f/g, ' ')}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default PokemonEntries;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}