{"ast":null,"code":"var _jsxFileName = \"/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/pokedex/PokemonDetail.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { Container, Tabs, Tab } from 'react-bootstrap';\nimport PokemonBasicInfo from './PokemonBasicInfo';\nimport PokemonLearnset from './PokemonLearnset';\nimport PokemonSprites from './PokemonSprites';\nimport PokemonEntries from './PokemonEntries';\nimport PokemonLocations from './PokemonLocations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchPokemonForm = async id => {\n  const {\n    data\n  } = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n  return data;\n};\nconst fetchPokemonSpecies = async url => {\n  const {\n    data\n  } = await axios.get(url);\n  return data;\n};\nconst fetchMoveDetails = async url => {\n  const {\n    data\n  } = await axios.get(url);\n  return data;\n};\nconst fetchEvolutionChain = async url => {\n  const {\n    data\n  } = await axios.get(url);\n  return data;\n};\nconst PokemonDetail = () => {\n  _s();\n  var _pokemonForm2$moves$m;\n  const {\n    id\n  } = useParams();\n  const {\n    data: pokemonForm2,\n    isLoading: isLoadingForm,\n    error: formError\n  } = useQuery({\n    queryKey: ['pokemonForm', id],\n    queryFn: () => fetchPokemonForm(id),\n    enabled: !!id\n  });\n  const speciesUrl = pokemonForm2 === null || pokemonForm2 === void 0 ? void 0 : pokemonForm2.species.url;\n  const {\n    data: pokemonSpecies2,\n    isLoading: isLoadingSpecies,\n    error: speciesError\n  } = useQuery({\n    queryKey: ['pokemonSpecies', speciesUrl],\n    queryFn: () => fetchPokemonSpecies(speciesUrl),\n    enabled: !!speciesUrl\n  });\n  const moveUrls = (_pokemonForm2$moves$m = pokemonForm2 === null || pokemonForm2 === void 0 ? void 0 : pokemonForm2.moves.map(move => move.move.url)) !== null && _pokemonForm2$moves$m !== void 0 ? _pokemonForm2$moves$m : [];\n  const {\n    data: moveDetailsArray = [],\n    isLoading: isLoadingMoves,\n    error: movesError\n  } = useQuery({\n    queryKey: ['moveDetails', moveUrls],\n    queryFn: () => Promise.all(moveUrls.map(url => fetchMoveDetails(url))),\n    enabled: !!(pokemonForm2 !== null && pokemonForm2 !== void 0 && pokemonForm2.moves)\n  });\n  const evolutionChainUrl = pokemonSpecies2 === null || pokemonSpecies2 === void 0 ? void 0 : pokemonSpecies2.evolution_chain.url;\n  const {\n    data: evolutionChainData\n  } = useQuery({\n    queryKey: ['evolution', evolutionChainUrl],\n    queryFn: () => fetchEvolutionChain(evolutionChainUrl),\n    enabled: !!evolutionChainUrl\n  });\n  if (isLoadingForm || isLoadingSpecies || isLoadingMoves) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }, this);\n  }\n  if (formError || speciesError || movesError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error loading data: \", (formError === null || formError === void 0 ? void 0 : formError.message) || (speciesError === null || speciesError === void 0 ? void 0 : speciesError.message) || (movesError === null || movesError === void 0 ? void 0 : movesError.message)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }, this);\n  }\n  const moveDataMap2 = {};\n  moveDetailsArray.forEach(moveData => {\n    moveDataMap2[moveData.name] = {\n      id: moveData.id,\n      power: moveData.power,\n      accuracy: moveData.accuracy,\n      pp: moveData.pp,\n      damage_class: moveData.damage_class.name,\n      type: moveData.type.name,\n      past_values: moveData.past_values,\n      machines: moveData.machines\n    };\n  });\n  const flattenedMoves2 = pokemonForm2 === null || pokemonForm2 === void 0 ? void 0 : pokemonForm2.moves.flatMap(move => move.version_group_details.map(detail => ({\n    name: move.move.name,\n    version_group: detail.version_group.name,\n    version_group_id: parseInt(detail.version_group.url.split('/').slice(-2, -1)[0]),\n    level_learned_at: detail.level_learned_at,\n    learn_method: detail.move_learn_method.name\n  })));\n  const moveDetailsArray2 = [];\n  for (const move of flattenedMoves2 !== null && flattenedMoves2 !== void 0 ? flattenedMoves2 : []) {\n    // Fetch details from the moveDataMap\n    const moveData = moveDataMap2[move.name];\n    let {\n      id,\n      power,\n      accuracy,\n      pp,\n      type,\n      damage_class\n    } = moveData;\n\n    // Check past_values to adjust the move details based on the version group\n    moveData.past_values.forEach(pastValue => {\n      const pastVersionId = parseInt(pastValue.version_group.url.split('/').slice(-2, -1)[0]);\n      if (move.version_group_id < pastVersionId) {\n        if (pastValue.power !== null) power = pastValue.power;\n        if (pastValue.accuracy !== null) accuracy = pastValue.accuracy;\n        if (pastValue.pp !== null) pp = pastValue.pp;\n        if (pastValue.type !== null) type = pastValue.type.name;\n      }\n    });\n\n    // removed machine data because too many api calls\n\n    /*\n    let machine = '';\n    if (move.learn_method === 'machine') {\n        const machineEntry = moveDataMap[move.name].machines.find(\n            (m: any) => m.version_group.name === move.version_group\n        );\n        if (machineEntry) {\n            const { data: machineData } = await axios.get(machineEntry.machine.url);\n            machine = machineData.item.name;\n        }\n    }*/\n\n    moveDetailsArray2.push({\n      id: id,\n      name: move.name,\n      power,\n      accuracy,\n      pp,\n      damage_class,\n      type,\n      level_learned_at: move.level_learned_at,\n      machine: '',\n      learn_method: move.learn_method,\n      version_group: move.version_group,\n      version_group_id: move.version_group_id\n    });\n  }\n\n  // useEffect(() => {\n  //     const fetchPokemonForm = async () => {\n  //         try {\n  //             const formResponse = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n  //             const formData = formResponse.data;\n\n  //             // species data\n  //             const speciesResponse = await axios.get(formData.species.url);\n  //             const speciesData = speciesResponse.data;\n\n  //             const nationalDexNumber = speciesData.pokedex_numbers.find((entry: any) => entry.pokedex.name === 'national').entry_number;\n  //             const generation = speciesData.generation.name.replace('generation-', 'Generation ').toUpperCase();\n  //             const genus = speciesData.genera.find((entry: any) => entry.language.name === 'en').genus;\n  //             const varieties = speciesData.varieties;\n  //             const evolutionChainUrl = speciesData.evolution_chain.url;\n\n  //             setPokemonForm({\n  //                 id: formData.id,\n  //                 name: formData.name,\n  //                 abilities: formData.abilities.map((ability: any) => ({\n  //                     name: ability.ability.name,\n  //                     is_hidden: ability.is_hidden,\n  //                 })),\n  //                 height: formData.height / 10,\n  //                 weight: formData.weight / 10,\n  //                 stats: formData.stats.map((stat: any) => ({\n  //                     name: stat.stat.name,\n  //                     base_stat: stat.base_stat,\n  //                     effort: stat.effort,\n  //                 })),\n  //                 types: formData.types.map((type: any) => ({\n  //                     name: type.type.name,\n  //                 })),\n  //                 base_experience: formData.base_experience,\n  //                 sprites: formData.sprites,\n  //                 moves: formData.moves,  \n  //             });\n\n  //             // evolution chain data\n  //             const evolutionResponse = await axios.get(evolutionChainUrl);\n  //             const evolutionChain = evolutionResponse.data.chain;\n\n  //             // Set state\n  //             setPokemonSpecies({\n  //                 name: speciesData.name,\n  //                 nationalDexNumber,\n  //                 generation,\n  //                 genus,\n  //                 varieties,\n  //                 evolution_chain: evolutionChain,\n  //                 capture_rate: speciesData.capture_rate,\n  //                 base_happiness: speciesData.base_happiness,\n  //                 growth_rate: speciesData.growth_rate,\n  //                 egg_groups: speciesData.egg_groups,\n  //                 gender_rate: speciesData.gender_rate,\n  //                 hatch_counter: speciesData.hatch_counter,\n  //                 flavor_text_entries: speciesData.flavor_text_entries, \n  //             });\n\n  //             // learnset data (oh god this was fucked up)\n\n  //             const moveDataMap: { [moveName: string]: { id: number, power: number, accuracy: number, pp: number, damage_class: string, type: string, past_values: any[], machines: any[] } } = {};\n  //             const uniqueMoves: string[] = [...new Set<string>(formData.moves.map((move: any) => move.move.name))];\n\n  //             await Promise.all(uniqueMoves.map(async (moveName: string) => {\n  //                 const move = formData.moves.find((m: any) => m.move.name === moveName);\n  //                 const { data: moveData } = await axios.get(move.move.url);\n\n  //                 moveDataMap[moveName] = {\n  //                     id: moveData.id,\n  //                     power: moveData.power,\n  //                     accuracy: moveData.accuracy,\n  //                     pp: moveData.pp,\n  //                     damage_class: moveData.damage_class.name,\n  //                     type: moveData.type.name,\n  //                     past_values: moveData.past_values,\n  //                     machines: moveData.machines\n  //                 };\n  //             }));\n\n  //             console.log('moveDataMap:', moveDataMap);\n\n  //             const flattenedMoves = formData.moves.flatMap((move: any) =>\n  //                 move.version_group_details.map((detail: any) => ({\n  //                     name: move.move.name,\n  //                     url: move.move.url,\n  //                     version_group: detail.version_group.name,\n  //                     version_group_id: parseInt(detail.version_group.url.split('/').slice(-2, -1)[0]),\n  //                     level_learned_at: detail.level_learned_at,\n  //                     learn_method: detail.move_learn_method.name,\n  //                 }))\n  //             );\n\n  //             const moveDetailsArray: GenericMoveDetails[] = [];\n\n  //             for (const move of flattenedMoves) {\n  //                 // Fetch details from the moveDataMap\n  //                 const moveData = moveDataMap[move.name];\n  //                 let { id, power, accuracy, pp, type, damage_class } = moveData;\n\n  //                 // Check past_values to adjust the move details based on the version group\n  //                 moveData.past_values.forEach((pastValue: any) => {\n  //                     const pastVersionId = parseInt(pastValue.version_group.url.split('/').slice(-2, -1)[0]);\n  //                     if (move.version_group_id < pastVersionId) {\n  //                         if (pastValue.power !== null) power = pastValue.power;\n  //                         if (pastValue.accuracy !== null) accuracy = pastValue.accuracy;\n  //                         if (pastValue.pp !== null) pp = pastValue.pp;\n  //                         if (pastValue.type !== null) type = pastValue.type.name;\n  //                     }\n  //                 });\n\n  //                 // removed machine data because too many api calls\n\n  //                 /*\n  //                 let machine = '';\n  //                 if (move.learn_method === 'machine') {\n  //                     const machineEntry = moveDataMap[move.name].machines.find(\n  //                         (m: any) => m.version_group.name === move.version_group\n  //                     );\n  //                     if (machineEntry) {\n  //                         const { data: machineData } = await axios.get(machineEntry.machine.url);\n  //                         machine = machineData.item.name;\n  //                     }\n  //                 }*/\n\n  //                 moveDetailsArray.push({\n  //                     id: id,\n  //                     name: move.name,\n  //                     power,\n  //                     accuracy,\n  //                     pp,\n  //                     damage_class,\n  //                     type,\n  //                     level_learned_at: move.level_learned_at,\n  //                     machine: '',\n  //                     learn_method: move.learn_method,\n  //                     version_group: move.version_group,\n  //                     version_group_id: move.version_group_id,\n  //                 });\n  //             }\n  //             //console.log('moveDetailsArray:', moveDetailsArray);\n\n  //             const finalMoveDetailsArray = moveDetailsArray;\n\n  //             setPokemonLearnsets(finalMoveDetailsArray);\n  //             //console.log('pokemonLearnsets after setting:', pokemonLearnsets);\n  //             //console.log('final:', finalMoveDetailsArray);\n  //         } catch (error) {\n  //             console.error('Error fetching Pokémon details:', error);\n  //         }\n  //     };\n\n  //     fetchPokemonForm();\n  // }, [id]);\n\n  // useEffect(() => {\n  //    //console.log('pokemonLearnsets:', pokemonLearnsets);\n  // }, [pokemonLearnsets]);\n\n  // if (!pokemonForm || !pokemonSpecies) {\n  //     return <div>Loading...</div>;\n  // }\n\n  console.log('pokemonForm2:', pokemonForm2);\n  console.log('pokemonSpecies2:', pokemonSpecies2);\n  console.log('flattenedMoves2:', flattenedMoves2);\n  console.log('moveDetailsArray2:', moveDetailsArray2);\n  console.log('sprite:', pokemonForm2 === null || pokemonForm2 === void 0 ? void 0 : pokemonForm2.sprites);\n  console.log('entries:', pokemonSpecies2 === null || pokemonSpecies2 === void 0 ? void 0 : pokemonSpecies2.flavor_text_entries);\n  const englishGenusEntry = pokemonSpecies2 === null || pokemonSpecies2 === void 0 ? void 0 : pokemonSpecies2.genera.find(entry => entry.language.name === 'en');\n  const genus = englishGenusEntry ? englishGenusEntry.genus : '';\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: pokemonSpecies2 !== null && pokemonSpecies2 !== void 0 && pokemonSpecies2.name ? `${pokemonSpecies2.name.charAt(0).toUpperCase() + pokemonSpecies2.name.slice(1)} - #${String(pokemonSpecies2 === null || pokemonSpecies2 === void 0 ? void 0 : pokemonSpecies2.id).padStart(3, '0')}` : 'Loading...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [pokemonSpecies2 === null || pokemonSpecies2 === void 0 ? void 0 : pokemonSpecies2.generation.name, \" - \", genus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      defaultActiveKey: \"info\",\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"info\",\n        title: \"Info\",\n        children: /*#__PURE__*/_jsxDEV(PokemonBasicInfo, {\n          form: pokemonForm2,\n          species: pokemonSpecies2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"learnset\",\n        title: \"Learnset\",\n        children: /*#__PURE__*/_jsxDEV(PokemonLearnset, {\n          moves: moveDetailsArray2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"locations\",\n        title: \"Locations\",\n        children: /*#__PURE__*/_jsxDEV(PokemonLocations, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"sprites\",\n        title: \"Sprites\",\n        children: /*#__PURE__*/_jsxDEV(PokemonSprites, {\n          sprites: pokemonForm2.sprites\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"entries\",\n        title: \"Entries\",\n        children: /*#__PURE__*/_jsxDEV(PokemonEntries, {\n          entries: pokemonSpecies2.flavor_text_entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 9\n  }, this);\n};\n_s(PokemonDetail, \"9tfx3TMSPFzmrod2gH/+IVIHQTA=\", false, function () {\n  return [useParams, useQuery, useQuery, useQuery, useQuery];\n});\n_c = PokemonDetail;\nexport default PokemonDetail;\nvar _c;\n$RefreshReg$(_c, \"PokemonDetail\");","map":{"version":3,"names":["React","useParams","useQuery","axios","Container","Tabs","Tab","PokemonBasicInfo","PokemonLearnset","PokemonSprites","PokemonEntries","PokemonLocations","jsxDEV","_jsxDEV","fetchPokemonForm","id","data","get","fetchPokemonSpecies","url","fetchMoveDetails","fetchEvolutionChain","PokemonDetail","_s","_pokemonForm2$moves$m","pokemonForm2","isLoading","isLoadingForm","error","formError","queryKey","queryFn","enabled","speciesUrl","species","pokemonSpecies2","isLoadingSpecies","speciesError","moveUrls","moves","map","move","moveDetailsArray","isLoadingMoves","movesError","Promise","all","evolutionChainUrl","evolution_chain","evolutionChainData","children","fileName","_jsxFileName","lineNumber","columnNumber","message","moveDataMap2","forEach","moveData","name","power","accuracy","pp","damage_class","type","past_values","machines","flattenedMoves2","flatMap","version_group_details","detail","version_group","version_group_id","parseInt","split","slice","level_learned_at","learn_method","move_learn_method","moveDetailsArray2","pastValue","pastVersionId","push","machine","console","log","sprites","flavor_text_entries","englishGenusEntry","genera","find","entry","language","genus","charAt","toUpperCase","String","padStart","generation","defaultActiveKey","className","eventKey","title","form","entries","_c","$RefreshReg$"],"sources":["/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/pokedex/PokemonDetail.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { Container, Tabs, Tab } from 'react-bootstrap';\nimport PokemonBasicInfo from './PokemonBasicInfo';\nimport PokemonLearnset from './PokemonLearnset';\nimport PokemonSprites from './PokemonSprites';\nimport PokemonEntries from './PokemonEntries';\nimport { PokemonForm, PokemonSpecies, GenericMoveDetails } from '../../types';\nimport PokemonLocations from './PokemonLocations';\n\nconst fetchPokemonForm = async (id: string): Promise<PokemonForm> => {\n    const { data } = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n    return data;\n};\n\nconst fetchPokemonSpecies = async (url: string): Promise<PokemonSpecies> => {\n    const { data } = await axios.get(url);\n    return data;\n};\n\nconst fetchMoveDetails = async (url: string) => {\n    const { data } = await axios.get(url);\n    return data;\n};\n\nconst fetchEvolutionChain = async (url: string) => {\n    const { data } = await axios.get(url);\n    return data;\n}\n\nconst PokemonDetail: React.FC = () => {\n    const { id } = useParams<{ id: string }>();\n\n    const { data: pokemonForm2, isLoading: isLoadingForm, error: formError } = useQuery({\n        queryKey: ['pokemonForm', id],\n        queryFn: () => fetchPokemonForm(id!),\n        enabled: !!id,\n    });\n\n    const speciesUrl = pokemonForm2?.species.url;\n    const { data: pokemonSpecies2, isLoading: isLoadingSpecies, error: speciesError } = useQuery({\n        queryKey: ['pokemonSpecies', speciesUrl],\n        queryFn: () => fetchPokemonSpecies(speciesUrl!),\n        enabled: !!speciesUrl,\n    });\n\n    const moveUrls = pokemonForm2?.moves.map((move: any) => move.move.url) ?? [];\n    const { data: moveDetailsArray = [], isLoading: isLoadingMoves, error: movesError } = useQuery({\n        queryKey: ['moveDetails', moveUrls],\n        queryFn: () =>\n            Promise.all(\n                moveUrls.map((url) => fetchMoveDetails(url))\n            ),\n        enabled: !!pokemonForm2?.moves,\n    });\n\n    const evolutionChainUrl = pokemonSpecies2?.evolution_chain.url;\n    const { data: evolutionChainData } = useQuery({\n        queryKey: ['evolution', evolutionChainUrl],\n        queryFn: () => fetchEvolutionChain(evolutionChainUrl!),\n        enabled: !!evolutionChainUrl,\n    });\n\n    if (isLoadingForm || isLoadingSpecies || isLoadingMoves) {\n        return <div>Loading...</div>;\n    }\n\n    if (formError || speciesError || movesError) {\n        return <div>Error loading data: {formError?.message || speciesError?.message || movesError?.message}</div>;\n    }\n\n    const moveDataMap2: { [key: string]: any } = {};\n    moveDetailsArray.forEach((moveData: any) => {\n        moveDataMap2[moveData.name] = {\n            id: moveData.id,\n            power: moveData.power,\n            accuracy: moveData.accuracy,\n            pp: moveData.pp,\n            damage_class: moveData.damage_class.name,\n            type: moveData.type.name,\n            past_values: moveData.past_values,\n            machines: moveData.machines\n        };\n    });\n\n    const flattenedMoves2 = pokemonForm2?.moves.flatMap((move: any) =>\n        move.version_group_details.map((detail: any) => ({\n            name: move.move.name,\n            version_group: detail.version_group.name,\n            version_group_id: parseInt(detail.version_group.url.split('/').slice(-2, -1)[0]),\n            level_learned_at: detail.level_learned_at,\n            learn_method: detail.move_learn_method.name,\n        }))\n    );\n\n    const moveDetailsArray2: GenericMoveDetails[] = [];\n\n    for (const move of flattenedMoves2??[]) {\n        // Fetch details from the moveDataMap\n        const moveData = moveDataMap2[move.name];\n        let { id, power, accuracy, pp, type, damage_class } = moveData;\n\n        // Check past_values to adjust the move details based on the version group\n        moveData.past_values.forEach((pastValue: any) => {\n            const pastVersionId = parseInt(pastValue.version_group.url.split('/').slice(-2, -1)[0]);\n            if (move.version_group_id < pastVersionId) {\n                if (pastValue.power !== null) power = pastValue.power;\n                if (pastValue.accuracy !== null) accuracy = pastValue.accuracy;\n                if (pastValue.pp !== null) pp = pastValue.pp;\n                if (pastValue.type !== null) type = pastValue.type.name;\n            }\n        });\n\n        // removed machine data because too many api calls\n\n        /*\n        let machine = '';\n        if (move.learn_method === 'machine') {\n            const machineEntry = moveDataMap[move.name].machines.find(\n                (m: any) => m.version_group.name === move.version_group\n            );\n            if (machineEntry) {\n                const { data: machineData } = await axios.get(machineEntry.machine.url);\n                machine = machineData.item.name;\n            }\n        }*/\n\n        moveDetailsArray2.push({\n            id: id,\n            name: move.name,\n            power,\n            accuracy,\n            pp,\n            damage_class,\n            type,\n            level_learned_at: move.level_learned_at,\n            machine: '',\n            learn_method: move.learn_method,\n            version_group: move.version_group,\n            version_group_id: move.version_group_id,\n        });\n    }\n    \n\n    // useEffect(() => {\n    //     const fetchPokemonForm = async () => {\n    //         try {\n    //             const formResponse = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n    //             const formData = formResponse.data;\n        \n    //             // species data\n    //             const speciesResponse = await axios.get(formData.species.url);\n    //             const speciesData = speciesResponse.data;\n        \n    //             const nationalDexNumber = speciesData.pokedex_numbers.find((entry: any) => entry.pokedex.name === 'national').entry_number;\n    //             const generation = speciesData.generation.name.replace('generation-', 'Generation ').toUpperCase();\n    //             const genus = speciesData.genera.find((entry: any) => entry.language.name === 'en').genus;\n    //             const varieties = speciesData.varieties;\n    //             const evolutionChainUrl = speciesData.evolution_chain.url;\n\n    //             setPokemonForm({\n    //                 id: formData.id,\n    //                 name: formData.name,\n    //                 abilities: formData.abilities.map((ability: any) => ({\n    //                     name: ability.ability.name,\n    //                     is_hidden: ability.is_hidden,\n    //                 })),\n    //                 height: formData.height / 10,\n    //                 weight: formData.weight / 10,\n    //                 stats: formData.stats.map((stat: any) => ({\n    //                     name: stat.stat.name,\n    //                     base_stat: stat.base_stat,\n    //                     effort: stat.effort,\n    //                 })),\n    //                 types: formData.types.map((type: any) => ({\n    //                     name: type.type.name,\n    //                 })),\n    //                 base_experience: formData.base_experience,\n    //                 sprites: formData.sprites,\n    //                 moves: formData.moves,  \n    //             });\n\n    //             // evolution chain data\n    //             const evolutionResponse = await axios.get(evolutionChainUrl);\n    //             const evolutionChain = evolutionResponse.data.chain;\n\n    //             // Set state\n    //             setPokemonSpecies({\n    //                 name: speciesData.name,\n    //                 nationalDexNumber,\n    //                 generation,\n    //                 genus,\n    //                 varieties,\n    //                 evolution_chain: evolutionChain,\n    //                 capture_rate: speciesData.capture_rate,\n    //                 base_happiness: speciesData.base_happiness,\n    //                 growth_rate: speciesData.growth_rate,\n    //                 egg_groups: speciesData.egg_groups,\n    //                 gender_rate: speciesData.gender_rate,\n    //                 hatch_counter: speciesData.hatch_counter,\n    //                 flavor_text_entries: speciesData.flavor_text_entries, \n    //             });\n\n    //             // learnset data (oh god this was fucked up)\n\n    //             const moveDataMap: { [moveName: string]: { id: number, power: number, accuracy: number, pp: number, damage_class: string, type: string, past_values: any[], machines: any[] } } = {};\n    //             const uniqueMoves: string[] = [...new Set<string>(formData.moves.map((move: any) => move.move.name))];\n                \n    //             await Promise.all(uniqueMoves.map(async (moveName: string) => {\n    //                 const move = formData.moves.find((m: any) => m.move.name === moveName);\n    //                 const { data: moveData } = await axios.get(move.move.url);\n                \n    //                 moveDataMap[moveName] = {\n    //                     id: moveData.id,\n    //                     power: moveData.power,\n    //                     accuracy: moveData.accuracy,\n    //                     pp: moveData.pp,\n    //                     damage_class: moveData.damage_class.name,\n    //                     type: moveData.type.name,\n    //                     past_values: moveData.past_values,\n    //                     machines: moveData.machines\n    //                 };\n    //             }));\n\n    //             console.log('moveDataMap:', moveDataMap);\n                \n    //             const flattenedMoves = formData.moves.flatMap((move: any) =>\n    //                 move.version_group_details.map((detail: any) => ({\n    //                     name: move.move.name,\n    //                     url: move.move.url,\n    //                     version_group: detail.version_group.name,\n    //                     version_group_id: parseInt(detail.version_group.url.split('/').slice(-2, -1)[0]),\n    //                     level_learned_at: detail.level_learned_at,\n    //                     learn_method: detail.move_learn_method.name,\n    //                 }))\n    //             );\n\n    //             const moveDetailsArray: GenericMoveDetails[] = [];\n\n    //             for (const move of flattenedMoves) {\n    //                 // Fetch details from the moveDataMap\n    //                 const moveData = moveDataMap[move.name];\n    //                 let { id, power, accuracy, pp, type, damage_class } = moveData;\n\n    //                 // Check past_values to adjust the move details based on the version group\n    //                 moveData.past_values.forEach((pastValue: any) => {\n    //                     const pastVersionId = parseInt(pastValue.version_group.url.split('/').slice(-2, -1)[0]);\n    //                     if (move.version_group_id < pastVersionId) {\n    //                         if (pastValue.power !== null) power = pastValue.power;\n    //                         if (pastValue.accuracy !== null) accuracy = pastValue.accuracy;\n    //                         if (pastValue.pp !== null) pp = pastValue.pp;\n    //                         if (pastValue.type !== null) type = pastValue.type.name;\n    //                     }\n    //                 });\n\n    //                 // removed machine data because too many api calls\n\n    //                 /*\n    //                 let machine = '';\n    //                 if (move.learn_method === 'machine') {\n    //                     const machineEntry = moveDataMap[move.name].machines.find(\n    //                         (m: any) => m.version_group.name === move.version_group\n    //                     );\n    //                     if (machineEntry) {\n    //                         const { data: machineData } = await axios.get(machineEntry.machine.url);\n    //                         machine = machineData.item.name;\n    //                     }\n    //                 }*/\n\n    //                 moveDetailsArray.push({\n    //                     id: id,\n    //                     name: move.name,\n    //                     power,\n    //                     accuracy,\n    //                     pp,\n    //                     damage_class,\n    //                     type,\n    //                     level_learned_at: move.level_learned_at,\n    //                     machine: '',\n    //                     learn_method: move.learn_method,\n    //                     version_group: move.version_group,\n    //                     version_group_id: move.version_group_id,\n    //                 });\n    //             }\n    //             //console.log('moveDetailsArray:', moveDetailsArray);\n\n    //             const finalMoveDetailsArray = moveDetailsArray;\n                \n    //             setPokemonLearnsets(finalMoveDetailsArray);\n    //             //console.log('pokemonLearnsets after setting:', pokemonLearnsets);\n    //             //console.log('final:', finalMoveDetailsArray);\n    //         } catch (error) {\n    //             console.error('Error fetching Pokémon details:', error);\n    //         }\n    //     };\n\n    //     fetchPokemonForm();\n    // }, [id]);\n\n    \n\n    // useEffect(() => {\n    //    //console.log('pokemonLearnsets:', pokemonLearnsets);\n    // }, [pokemonLearnsets]);\n\n    // if (!pokemonForm || !pokemonSpecies) {\n    //     return <div>Loading...</div>;\n    // }\n\n    console.log('pokemonForm2:', pokemonForm2);\n    console.log('pokemonSpecies2:', pokemonSpecies2);\n    console.log('flattenedMoves2:', flattenedMoves2);\n    console.log('moveDetailsArray2:', moveDetailsArray2);\n    console.log('sprite:', pokemonForm2?.sprites);\n    console.log('entries:', pokemonSpecies2?.flavor_text_entries);\n\n    \n\n    \n    \n    const englishGenusEntry = pokemonSpecies2?.genera.find(\n        (entry: any) => entry.language.name === 'en'\n    );\n    const genus = englishGenusEntry ? englishGenusEntry.genus : '';\n\n    return (\n        <Container>\n            <h1>\n                {pokemonSpecies2?.name ? \n                    `${pokemonSpecies2.name.charAt(0).toUpperCase() + pokemonSpecies2.name.slice(1)} - #${String(pokemonSpecies2?.id).padStart(3, '0')}` \n                    : 'Loading...'}\n            </h1>\n            <p>\n                {pokemonSpecies2?.generation.name} - {genus}\n            </p>\n\n            <Tabs defaultActiveKey=\"info\" className=\"mb-3\">\n                \n                <Tab eventKey=\"info\" title=\"Info\">\n                    <PokemonBasicInfo form={pokemonForm2!} species={pokemonSpecies2!} />\n                </Tab>\n                <Tab eventKey=\"learnset\" title=\"Learnset\">\n                    <PokemonLearnset moves={moveDetailsArray2}/>\n                </Tab>\n                <Tab eventKey=\"locations\" title=\"Locations\">\n                    <PokemonLocations />\n                </Tab>\n                <Tab eventKey=\"sprites\" title=\"Sprites\">\n                    <PokemonSprites sprites={pokemonForm2!.sprites} />\n                </Tab>\n                <Tab eventKey=\"entries\" title=\"Entries\">\n                    <PokemonEntries entries={pokemonSpecies2!.flavor_text_entries} />\n                </Tab>\n            </Tabs>\n        </Container>\n    );\n};\n\nexport default PokemonDetail;"],"mappings":"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ZC,IAAI;MACJY,gBAAgB,EAAEnC,IAAI,CAACmC,gBAAgB;MACvCO,OAAO,EAAE,EAAE;MACXN,YAAY,EAAEpC,IAAI,CAACoC,YAAY;MAC/BN,aAAa,EAAE9B,IAAI,CAAC8B,aAAa;MACjCC,gBAAgB,EAAE/B,IAAI,CAAC+B;IAC3B,CAAC,CAAC;EACN;;EAGA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAIA;EACA;EACA;;EAEA;EACA;EACA;;EAEAY,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE5D,YAAY,CAAC;EAC1C2D,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAElD,eAAe,CAAC;EAChDiD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAElB,eAAe,CAAC;EAChDiB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,iBAAiB,CAAC;EACpDK,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE5D,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAE6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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}