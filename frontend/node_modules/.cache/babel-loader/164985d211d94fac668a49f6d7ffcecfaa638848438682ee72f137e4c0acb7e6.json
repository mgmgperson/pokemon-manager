{"ast":null,"code":"var _jsxFileName = \"/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/regions/RegionList.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport SortableTable from '../SortableTable';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Assuming Region is defined in your types.ts file\n\n// Fetch regions data\nconst fetchRegions = async () => {\n  const {\n    data\n  } = await axios.get('http://localhost:5000/regions');\n  return data.data;\n};\nconst RegionList = () => {\n  _s();\n  // Use React Query to fetch regions\n  const {\n    data: regions,\n    isLoading,\n    error\n  } = useQuery({\n    queryKey: ['regions'],\n    queryFn: fetchRegions\n  });\n  const columns = [{\n    key: 'name',\n    label: 'Name',\n    render: item => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/regions/${item.id}`,\n      className: \"text-decoration-none text-dark link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover\",\n      children: item.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this)\n  }, {\n    key: 'population',\n    label: 'Population'\n  }];\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error fetching regions data.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Regions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), regions && /*#__PURE__*/_jsxDEV(SortableTable, {\n      columns: columns,\n      data: regions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(RegionList, \"5h6LBt/vos9Ko4JyZObT53T3CM4=\", false, function () {\n  return [useQuery];\n});\n_c = RegionList;\nexport default RegionList;\nvar _c;\n$RefreshReg$(_c, \"RegionList\");","map":{"version":3,"names":["React","useQuery","axios","SortableTable","Link","jsxDEV","_jsxDEV","fetchRegions","data","get","RegionList","_s","regions","isLoading","error","queryKey","queryFn","columns","key","label","render","item","to","id","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/regions/RegionList.tsx"],"sourcesContent":["import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport SortableTable from '../SortableTable';\nimport { Link } from 'react-router-dom';\nimport { Region } from '../../types';  // Assuming Region is defined in your types.ts file\n\n// Fetch regions data\nconst fetchRegions = async (): Promise<Region[]> => {\n    const { data } = await axios.get('http://localhost:5000/regions');\n    return data.data;\n};\n\nconst RegionList: React.FC = () => {\n    // Use React Query to fetch regions\n    const { data: regions, isLoading, error } = useQuery({\n        queryKey: ['regions'],\n        queryFn: fetchRegions,\n    });\n\n    const columns: Array<{ key: keyof Region, label: string, render?: (item: Region) => React.ReactNode }> = [\n        { \n            key: 'name', \n            label: 'Name', \n            render: (item: Region) => (\n                <Link \n                    to={`/regions/${item.id}`} \n                    className=\"text-decoration-none text-dark link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover\"\n                >\n                    {item.name}\n                </Link>\n            )\n        },\n        { key: 'population', label: 'Population' },\n    ];\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error fetching regions data.</div>;\n    }\n\n    return (\n        <div>\n            <h1>Regions</h1>\n            {regions && <SortableTable columns={columns} data={regions} />}\n        </div>\n    );\n};\n\nexport default RegionList;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACD;;AAEvC;AACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAA+B;EAChD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,+BAA+B,CAAC;EACjE,OAAOD,IAAI,CAACA,IAAI;AACpB,CAAC;AAED,MAAME,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B;EACA,MAAM;IAAEH,IAAI,EAAEI,OAAO;IAAEC,SAAS;IAAEC;EAAM,CAAC,GAAGb,QAAQ,CAAC;IACjDc,QAAQ,EAAE,CAAC,SAAS,CAAC;IACrBC,OAAO,EAAET;EACb,CAAC,CAAC;EAEF,MAAMU,OAAgG,GAAG,CACrG;IACIC,GAAG,EAAE,MAAM;IACXC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAGC,IAAY,iBACjBf,OAAA,CAACF,IAAI;MACDkB,EAAE,EAAE,YAAYD,IAAI,CAACE,EAAE,EAAG;MAC1BC,SAAS,EAAC,sHAAsH;MAAAC,QAAA,EAE/HJ,IAAI,CAACK;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAEd,CAAC,EACD;IAAEZ,GAAG,EAAE,YAAY;IAAEC,KAAK,EAAE;EAAa,CAAC,CAC7C;EAED,IAAIN,SAAS,EAAE;IACX,oBAAOP,OAAA;MAAAmB,QAAA,EAAK;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,IAAIhB,KAAK,EAAE;IACP,oBAAOR,OAAA;MAAAmB,QAAA,EAAK;IAA4B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClD;EAEA,oBACIxB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAI;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACflB,OAAO,iBAAIN,OAAA,CAACH,aAAa;MAACc,OAAO,EAAEA,OAAQ;MAACT,IAAI,EAAEI;IAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEd,CAAC;AAACnB,EAAA,CArCID,UAAoB;EAAA,QAEsBT,QAAQ;AAAA;AAAA8B,EAAA,GAFlDrB,UAAoB;AAuC1B,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}