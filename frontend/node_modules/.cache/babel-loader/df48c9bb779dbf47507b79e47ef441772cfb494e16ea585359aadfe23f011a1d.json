{"ast":null,"code":"var _jsxFileName = \"/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/RegionList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Table } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegionList = () => {\n  _s();\n  const [regions, setRegions] = useState([]);\n  const [sortConfig, setSortConfig] = useState(null);\n  useEffect(() => {\n    const fetchRegions = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/regions');\n        setRegions(response.data.data);\n      } catch (error) {\n        console.error('Error fetching regions:', error);\n      }\n    };\n    fetchRegions();\n  }, []);\n  const sortedRegions = React.useMemo(() => {\n    let sortableRegions = [...regions];\n    if (sortConfig !== null) {\n      sortableRegions.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableRegions;\n  }, [regions, sortConfig]);\n  const requestSort = key => {\n    let direction = 'ascending';\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({\n      key,\n      direction\n    });\n  };\n  const getClassNamesFor = key => {\n    if (!sortConfig) {\n      return;\n    }\n    return sortConfig.key === key ? sortConfig.direction : undefined;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Regions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => requestSort('name'),\n            className: getClassNamesFor('name'),\n            children: [\"Name \", (sortConfig === null || sortConfig === void 0 ? void 0 : sortConfig.key) === 'name' ? sortConfig.direction === 'ascending' ? '▲' : '▼' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => requestSort('population'),\n            className: getClassNamesFor('population'),\n            children: [\"Population \", (sortConfig === null || sortConfig === void 0 ? void 0 : sortConfig.key) === 'population' ? sortConfig.direction === 'ascending' ? '▲' : '▼' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: sortedRegions.map(region => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: region.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: region.population ? region.population.toLocaleString() : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)]\n        }, region.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(RegionList, \"JSTdHvZ12csEkblUz1CHpe/IRtQ=\");\n_c = RegionList;\nexport default RegionList;\nvar _c;\n$RefreshReg$(_c, \"RegionList\");","map":{"version":3,"names":["React","useEffect","useState","axios","Table","jsxDEV","_jsxDEV","RegionList","_s","regions","setRegions","sortConfig","setSortConfig","fetchRegions","response","get","data","error","console","sortedRegions","useMemo","sortableRegions","sort","a","b","key","direction","requestSort","getClassNamesFor","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","hover","onClick","className","map","region","name","population","toLocaleString","id","_c","$RefreshReg$"],"sources":["/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/RegionList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Table } from 'react-bootstrap';\n\ninterface Region {\n    id: number;\n    name: string;\n    population: number;\n}\n\nconst RegionList: React.FC = () => {\n    const [regions, setRegions] = useState<Region[]>([]);\n    const [sortConfig, setSortConfig] = useState<{ key: keyof Region, direction: string } | null>(null);\n\n    useEffect(() => {\n        const fetchRegions = async () => {\n            try {\n                const response = await axios.get('http://localhost:5000/regions');\n                setRegions(response.data.data);\n            } catch (error) {\n                console.error('Error fetching regions:', error);\n            }\n        };\n\n        fetchRegions();\n    }, []);\n\n    const sortedRegions = React.useMemo(() => {\n        let sortableRegions = [...regions];\n        if (sortConfig !== null) {\n            sortableRegions.sort((a, b) => {\n                if (a[sortConfig.key] < b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\n                }\n                if (a[sortConfig.key] > b[sortConfig.key]) {\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\n                }\n                return 0;\n            });\n        }\n        return sortableRegions;\n    }, [regions, sortConfig]);\n\n    const requestSort = (key: keyof Region) => {\n        let direction = 'ascending';\n        if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n            direction = 'descending';\n        }\n        setSortConfig({ key, direction });\n    };\n\n    const getClassNamesFor = (key: keyof Region) => {\n        if (!sortConfig) {\n            return;\n        }\n        return sortConfig.key === key ? sortConfig.direction : undefined;\n    };\n\n    return (\n        <div>\n            <h1>Regions</h1>\n            <Table hover>\n                <thead>\n                    <tr>\n                        <th onClick={() => requestSort('name')} className={getClassNamesFor('name')}>\n                            Name {sortConfig?.key === 'name' ? (sortConfig.direction === 'ascending' ? '▲' : '▼') : ''}\n                        </th>\n                        <th onClick={() => requestSort('population')} className={getClassNamesFor('population')}>\n                            Population {sortConfig?.key === 'population' ? (sortConfig.direction === 'ascending' ? '▲' : '▼') : ''}\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {sortedRegions.map((region) => (\n                        <tr key={region.id}>\n                            <td>{region.name}</td>\n                            <td>{region.population ? region.population.toLocaleString() : ''}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n        </div>\n    );\n};\n\nexport default RegionList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}