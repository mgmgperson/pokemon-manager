{"ast":null,"code":"var _jsxFileName = \"/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/pokedex/PokemonDetail.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { Container, Tabs, Tab } from 'react-bootstrap';\nimport PokemonBasicInfo from './PokemonBasicInfo';\nimport PokemonLearnset from './PokemonLearnset';\nimport PokemonSprites from './PokemonSprites';\nimport PokemonEntries from './PokemonEntries';\nimport PokemonLocations from './PokemonLocations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchPokemonForm = async id => {\n  const {\n    data\n  } = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n  return data;\n};\nconst fetchPokemonSpecies = async url => {\n  const {\n    data\n  } = await axios.get(url);\n  return data;\n};\nconst fetchMoveDetails = async url => {\n  const {\n    data\n  } = await axios.get(url);\n  return data;\n};\nconst PokemonDetail = () => {\n  _s();\n  var _pokemonForm2$moves$m;\n  const {\n    id\n  } = useParams();\n  const [pokemonForm, setPokemonForm] = useState(null);\n  const [pokemonSpecies, setPokemonSpecies] = useState(null);\n  const [pokemonLearnsets, setPokemonLearnsets] = useState([]);\n  const {\n    data: pokemonForm2,\n    isLoading: isLoadingForm,\n    error: formError\n  } = useQuery({\n    queryKey: ['pokemonForm', id],\n    queryFn: () => fetchPokemonForm(id),\n    enabled: !!id\n  });\n  const speciesUrl = pokemonForm2 === null || pokemonForm2 === void 0 ? void 0 : pokemonForm2.species.url;\n  const {\n    data: pokemonSpecies2,\n    isLoading: isLoadingSpecies,\n    error: speciesError\n  } = useQuery({\n    queryKey: ['pokemonSpecies', speciesUrl],\n    queryFn: () => fetchPokemonSpecies(speciesUrl),\n    enabled: !!speciesUrl\n  });\n  const moveUrls = (_pokemonForm2$moves$m = pokemonForm2 === null || pokemonForm2 === void 0 ? void 0 : pokemonForm2.moves.map(move => move.move.url)) !== null && _pokemonForm2$moves$m !== void 0 ? _pokemonForm2$moves$m : [];\n  const {\n    data: moveDetailsArray = [],\n    isLoading: isLoadingMoves,\n    error: movesError\n  } = useQuery({\n    queryKey: ['moveDetails', moveUrls],\n    queryFn: () => Promise.all(moveUrls.map(url => fetchMoveDetails(url))),\n    enabled: !!(pokemonForm !== null && pokemonForm !== void 0 && pokemonForm.moves)\n  });\n  if (isLoadingForm || isLoadingSpecies || isLoadingMoves) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }, this);\n  }\n  if (formError || speciesError || movesError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error loading data: \", (formError === null || formError === void 0 ? void 0 : formError.message) || (speciesError === null || speciesError === void 0 ? void 0 : speciesError.message) || (movesError === null || movesError === void 0 ? void 0 : movesError.message)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  }\n  const flattenedMoves2 = pokemonForm2 === null || pokemonForm2 === void 0 ? void 0 : pokemonForm2.moves.flatMap(move => move.version_group_details.map(detail => ({\n    name: move.move.name,\n    version_group: detail.version_group.name,\n    version_group_id: parseInt(detail.version_group.url.split('/').slice(-2, -1)[0]),\n    level_learned_at: detail.level_learned_at,\n    learn_method: detail.move_learn_method.name\n  })));\n  console.log('pokemonForm2:', pokemonForm2);\n  console.log('pokemonSpecies2:', pokemonSpecies2);\n  console.log('moveDetailsArray:', moveDetailsArray);\n  console.log('flattenedMoves2:', flattenedMoves2);\n  useEffect(() => {\n    const fetchPokemonForm = async () => {\n      try {\n        const formResponse = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n        const formData = formResponse.data;\n\n        // species data\n        const speciesResponse = await axios.get(formData.species.url);\n        const speciesData = speciesResponse.data;\n        const nationalDexNumber = speciesData.pokedex_numbers.find(entry => entry.pokedex.name === 'national').entry_number;\n        const generation = speciesData.generation.name.replace('generation-', 'Generation ').toUpperCase();\n        const genus = speciesData.genera.find(entry => entry.language.name === 'en').genus;\n        const varieties = speciesData.varieties;\n        const evolutionChainUrl = speciesData.evolution_chain.url;\n        setPokemonForm({\n          id: formData.id,\n          name: formData.name,\n          abilities: formData.abilities.map(ability => ({\n            name: ability.ability.name,\n            is_hidden: ability.is_hidden\n          })),\n          height: formData.height / 10,\n          weight: formData.weight / 10,\n          stats: formData.stats.map(stat => ({\n            name: stat.stat.name,\n            base_stat: stat.base_stat,\n            effort: stat.effort\n          })),\n          types: formData.types.map(type => ({\n            name: type.type.name\n          })),\n          base_experience: formData.base_experience,\n          sprites: formData.sprites,\n          moves: formData.moves\n        });\n\n        // evolution chain data\n        const evolutionResponse = await axios.get(evolutionChainUrl);\n        const evolutionChain = evolutionResponse.data.chain;\n\n        // Set state\n        setPokemonSpecies({\n          name: speciesData.name,\n          nationalDexNumber,\n          generation,\n          genus,\n          varieties,\n          evolution_chain: evolutionChain,\n          capture_rate: speciesData.capture_rate,\n          base_happiness: speciesData.base_happiness,\n          growth_rate: speciesData.growth_rate,\n          egg_groups: speciesData.egg_groups,\n          gender_rate: speciesData.gender_rate,\n          hatch_counter: speciesData.hatch_counter,\n          flavor_text_entries: speciesData.flavor_text_entries\n        });\n\n        // learnset data (oh god this was fucked up)\n\n        const moveDataMap = {};\n        const uniqueMoves = [...new Set(formData.moves.map(move => move.move.name))];\n        await Promise.all(uniqueMoves.map(async moveName => {\n          const move = formData.moves.find(m => m.move.name === moveName);\n          const {\n            data: moveData\n          } = await axios.get(move.move.url);\n          moveDataMap[moveName] = {\n            id: moveData.id,\n            power: moveData.power,\n            accuracy: moveData.accuracy,\n            pp: moveData.pp,\n            damage_class: moveData.damage_class.name,\n            type: moveData.type.name,\n            past_values: moveData.past_values,\n            machines: moveData.machines\n          };\n        }));\n        console.log('moveDataMap:', moveDataMap);\n        const flattenedMoves = formData.moves.flatMap(move => move.version_group_details.map(detail => ({\n          name: move.move.name,\n          url: move.move.url,\n          version_group: detail.version_group.name,\n          version_group_id: parseInt(detail.version_group.url.split('/').slice(-2, -1)[0]),\n          level_learned_at: detail.level_learned_at,\n          learn_method: detail.move_learn_method.name\n        })));\n        const moveDetailsArray = [];\n        for (const move of flattenedMoves) {\n          // Fetch details from the moveDataMap\n          const moveData = moveDataMap[move.name];\n          let {\n            id,\n            power,\n            accuracy,\n            pp,\n            type,\n            damage_class\n          } = moveData;\n\n          // Check past_values to adjust the move details based on the version group\n          moveData.past_values.forEach(pastValue => {\n            const pastVersionId = parseInt(pastValue.version_group.url.split('/').slice(-2, -1)[0]);\n            if (move.version_group_id < pastVersionId) {\n              if (pastValue.power !== null) power = pastValue.power;\n              if (pastValue.accuracy !== null) accuracy = pastValue.accuracy;\n              if (pastValue.pp !== null) pp = pastValue.pp;\n              if (pastValue.type !== null) type = pastValue.type.name;\n            }\n          });\n\n          // removed machine data because too many api calls\n\n          /*\n          let machine = '';\n          if (move.learn_method === 'machine') {\n              const machineEntry = moveDataMap[move.name].machines.find(\n                  (m: any) => m.version_group.name === move.version_group\n              );\n              if (machineEntry) {\n                  const { data: machineData } = await axios.get(machineEntry.machine.url);\n                  machine = machineData.item.name;\n              }\n          }*/\n\n          moveDetailsArray.push({\n            id: id,\n            name: move.name,\n            power,\n            accuracy,\n            pp,\n            damage_class,\n            type,\n            level_learned_at: move.level_learned_at,\n            machine: '',\n            learn_method: move.learn_method,\n            version_group: move.version_group,\n            version_group_id: move.version_group_id\n          });\n        }\n        //console.log('moveDetailsArray:', moveDetailsArray);\n\n        const finalMoveDetailsArray = moveDetailsArray;\n        setPokemonLearnsets(finalMoveDetailsArray);\n        //console.log('pokemonLearnsets after setting:', pokemonLearnsets);\n        //console.log('final:', finalMoveDetailsArray);\n      } catch (error) {\n        console.error('Error fetching PokÃ©mon details:', error);\n      }\n    };\n    fetchPokemonForm();\n  }, [id]);\n  useEffect(() => {\n    //console.log('pokemonLearnsets:', pokemonLearnsets);\n  }, [pokemonLearnsets]);\n  if (!pokemonForm || !pokemonSpecies) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [pokemonSpecies.name.charAt(0).toUpperCase() + pokemonSpecies.name.slice(1), \" - #\", String(pokemonSpecies.nationalDexNumber).padStart(3, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [pokemonSpecies.generation, \" - \", pokemonSpecies.genus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      defaultActiveKey: \"info\",\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"info\",\n        title: \"Info\",\n        children: /*#__PURE__*/_jsxDEV(PokemonBasicInfo, {\n          form: pokemonForm,\n          species: pokemonSpecies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"learnset\",\n        title: \"Learnset\",\n        children: /*#__PURE__*/_jsxDEV(PokemonLearnset, {\n          moves: pokemonLearnsets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"locations\",\n        title: \"Locations\",\n        children: /*#__PURE__*/_jsxDEV(PokemonLocations, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"sprites\",\n        title: \"Sprites\",\n        children: /*#__PURE__*/_jsxDEV(PokemonSprites, {\n          sprites: pokemonForm.sprites\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"entries\",\n        title: \"Entries\",\n        children: /*#__PURE__*/_jsxDEV(PokemonEntries, {\n          entries: pokemonSpecies.flavor_text_entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 9\n  }, this);\n};\n_s(PokemonDetail, \"3QvKwkpB11ECxHFAHgp3qT32tuM=\", false, function () {\n  return [useParams, useQuery, useQuery, useQuery];\n});\n_c = PokemonDetail;\nexport default PokemonDetail;\nvar _c;\n$RefreshReg$(_c, \"PokemonDetail\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useQuery","axios","Container","Tabs","Tab","PokemonBasicInfo","PokemonLearnset","PokemonSprites","PokemonEntries","PokemonLocations","jsxDEV","_jsxDEV","fetchPokemonForm","id","data","get","fetchPokemonSpecies","url","fetchMoveDetails","PokemonDetail","_s","_pokemonForm2$moves$m","pokemonForm","setPokemonForm","pokemonSpecies","setPokemonSpecies","pokemonLearnsets","setPokemonLearnsets","pokemonForm2","isLoading","isLoadingForm","error","formError","queryKey","queryFn","enabled","speciesUrl","species","pokemonSpecies2","isLoadingSpecies","speciesError","moveUrls","moves","map","move","moveDetailsArray","isLoadingMoves","movesError","Promise","all","children","fileName","_jsxFileName","lineNumber","columnNumber","message","flattenedMoves2","flatMap","version_group_details","detail","name","version_group","version_group_id","parseInt","split","slice","level_learned_at","learn_method","move_learn_method","console","log","formResponse","formData","speciesResponse","speciesData","nationalDexNumber","pokedex_numbers","find","entry","pokedex","entry_number","generation","replace","toUpperCase","genus","genera","language","varieties","evolutionChainUrl","evolution_chain","abilities","ability","is_hidden","height","weight","stats","stat","base_stat","effort","types","type","base_experience","sprites","evolutionResponse","evolutionChain","chain","capture_rate","base_happiness","growth_rate","egg_groups","gender_rate","hatch_counter","flavor_text_entries","moveDataMap","uniqueMoves","Set","moveName","m","moveData","power","accuracy","pp","damage_class","past_values","machines","flattenedMoves","forEach","pastValue","pastVersionId","push","machine","finalMoveDetailsArray","charAt","String","padStart","defaultActiveKey","className","eventKey","title","form","entries","_c","$RefreshReg$"],"sources":["/Users/alin/Documents/Saves/idiot-2/idiot/Project-Pokemon/frontend/src/components/pokedex/PokemonDetail.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { Container, Tabs, Tab } from 'react-bootstrap';\nimport PokemonBasicInfo from './PokemonBasicInfo';\nimport PokemonLearnset from './PokemonLearnset';\nimport PokemonSprites from './PokemonSprites';\nimport PokemonEntries from './PokemonEntries';\nimport { PokemonForm, PokemonSpecies, GenericMoveDetails } from '../../types';\nimport PokemonLocations from './PokemonLocations';\n\nconst fetchPokemonForm = async (id: string): Promise<PokemonForm> => {\n    const { data } = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n    return data;\n};\n\nconst fetchPokemonSpecies = async (url: string): Promise<PokemonSpecies> => {\n    const { data } = await axios.get(url);\n    return data;\n};\n\nconst fetchMoveDetails = async (url: string) => {\n    const { data } = await axios.get(url);\n    return data;\n};\n\nconst PokemonDetail: React.FC = () => {\n    const { id } = useParams<{ id: string }>();\n    const [pokemonForm, setPokemonForm] = useState<PokemonForm | null>(null);\n    const [pokemonSpecies, setPokemonSpecies] = useState<PokemonSpecies | null>(null);\n    const [pokemonLearnsets, setPokemonLearnsets] = useState<GenericMoveDetails[]>([]);\n\n    const { data: pokemonForm2, isLoading: isLoadingForm, error: formError } = useQuery({\n        queryKey: ['pokemonForm', id],\n        queryFn: () => fetchPokemonForm(id!),\n        enabled: !!id,\n    });\n\n    const speciesUrl = pokemonForm2?.species.url;\n    const { data: pokemonSpecies2, isLoading: isLoadingSpecies, error: speciesError } = useQuery({\n        queryKey: ['pokemonSpecies', speciesUrl],\n        queryFn: () => fetchPokemonSpecies(speciesUrl!),\n        enabled: !!speciesUrl,\n    });\n\n    const moveUrls = pokemonForm2?.moves.map((move: any) => move.move.url) ?? [];\n    const { data: moveDetailsArray = [], isLoading: isLoadingMoves, error: movesError } = useQuery({\n        queryKey: ['moveDetails', moveUrls],\n        queryFn: () =>\n            Promise.all(\n                moveUrls.map((url) => fetchMoveDetails(url))\n            ),\n        enabled: !!pokemonForm?.moves,\n    });\n\n    if (isLoadingForm || isLoadingSpecies || isLoadingMoves) {\n        return <div>Loading...</div>;\n    }\n\n    if (formError || speciesError || movesError) {\n        return <div>Error loading data: {formError?.message || speciesError?.message || movesError?.message}</div>;\n    }\n\n    const flattenedMoves2 = pokemonForm2?.moves.flatMap((move: any) =>\n        move.version_group_details.map((detail: any) => ({\n            name: move.move.name,\n            version_group: detail.version_group.name,\n            version_group_id: parseInt(detail.version_group.url.split('/').slice(-2, -1)[0]),\n            level_learned_at: detail.level_learned_at,\n            learn_method: detail.move_learn_method.name,\n        }))\n    );\n    \n\n    console.log('pokemonForm2:', pokemonForm2);\n    console.log('pokemonSpecies2:', pokemonSpecies2);\n    console.log('moveDetailsArray:', moveDetailsArray);\n    console.log('flattenedMoves2:', flattenedMoves2);\n\n    useEffect(() => {\n        const fetchPokemonForm = async () => {\n            try {\n                const formResponse = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}/`);\n                const formData = formResponse.data;\n        \n                // species data\n                const speciesResponse = await axios.get(formData.species.url);\n                const speciesData = speciesResponse.data;\n        \n                const nationalDexNumber = speciesData.pokedex_numbers.find((entry: any) => entry.pokedex.name === 'national').entry_number;\n                const generation = speciesData.generation.name.replace('generation-', 'Generation ').toUpperCase();\n                const genus = speciesData.genera.find((entry: any) => entry.language.name === 'en').genus;\n                const varieties = speciesData.varieties;\n                const evolutionChainUrl = speciesData.evolution_chain.url;\n\n                setPokemonForm({\n                    id: formData.id,\n                    name: formData.name,\n                    abilities: formData.abilities.map((ability: any) => ({\n                        name: ability.ability.name,\n                        is_hidden: ability.is_hidden,\n                    })),\n                    height: formData.height / 10,\n                    weight: formData.weight / 10,\n                    stats: formData.stats.map((stat: any) => ({\n                        name: stat.stat.name,\n                        base_stat: stat.base_stat,\n                        effort: stat.effort,\n                    })),\n                    types: formData.types.map((type: any) => ({\n                        name: type.type.name,\n                    })),\n                    base_experience: formData.base_experience,\n                    sprites: formData.sprites,\n                    moves: formData.moves,  \n                });\n\n                // evolution chain data\n                const evolutionResponse = await axios.get(evolutionChainUrl);\n                const evolutionChain = evolutionResponse.data.chain;\n\n                // Set state\n                setPokemonSpecies({\n                    name: speciesData.name,\n                    nationalDexNumber,\n                    generation,\n                    genus,\n                    varieties,\n                    evolution_chain: evolutionChain,\n                    capture_rate: speciesData.capture_rate,\n                    base_happiness: speciesData.base_happiness,\n                    growth_rate: speciesData.growth_rate,\n                    egg_groups: speciesData.egg_groups,\n                    gender_rate: speciesData.gender_rate,\n                    hatch_counter: speciesData.hatch_counter,\n                    flavor_text_entries: speciesData.flavor_text_entries, \n                });\n\n                // learnset data (oh god this was fucked up)\n\n                const moveDataMap: { [moveName: string]: { id: number, power: number, accuracy: number, pp: number, damage_class: string, type: string, past_values: any[], machines: any[] } } = {};\n                const uniqueMoves: string[] = [...new Set<string>(formData.moves.map((move: any) => move.move.name))];\n                \n                await Promise.all(uniqueMoves.map(async (moveName: string) => {\n                    const move = formData.moves.find((m: any) => m.move.name === moveName);\n                    const { data: moveData } = await axios.get(move.move.url);\n                \n                    moveDataMap[moveName] = {\n                        id: moveData.id,\n                        power: moveData.power,\n                        accuracy: moveData.accuracy,\n                        pp: moveData.pp,\n                        damage_class: moveData.damage_class.name,\n                        type: moveData.type.name,\n                        past_values: moveData.past_values,\n                        machines: moveData.machines\n                    };\n                }));\n\n                console.log('moveDataMap:', moveDataMap);\n                \n                const flattenedMoves = formData.moves.flatMap((move: any) =>\n                    move.version_group_details.map((detail: any) => ({\n                        name: move.move.name,\n                        url: move.move.url,\n                        version_group: detail.version_group.name,\n                        version_group_id: parseInt(detail.version_group.url.split('/').slice(-2, -1)[0]),\n                        level_learned_at: detail.level_learned_at,\n                        learn_method: detail.move_learn_method.name,\n                    }))\n                );\n\n                const moveDetailsArray: GenericMoveDetails[] = [];\n\n                for (const move of flattenedMoves) {\n                    // Fetch details from the moveDataMap\n                    const moveData = moveDataMap[move.name];\n                    let { id, power, accuracy, pp, type, damage_class } = moveData;\n\n                    // Check past_values to adjust the move details based on the version group\n                    moveData.past_values.forEach((pastValue: any) => {\n                        const pastVersionId = parseInt(pastValue.version_group.url.split('/').slice(-2, -1)[0]);\n                        if (move.version_group_id < pastVersionId) {\n                            if (pastValue.power !== null) power = pastValue.power;\n                            if (pastValue.accuracy !== null) accuracy = pastValue.accuracy;\n                            if (pastValue.pp !== null) pp = pastValue.pp;\n                            if (pastValue.type !== null) type = pastValue.type.name;\n                        }\n                    });\n\n                    // removed machine data because too many api calls\n\n                    /*\n                    let machine = '';\n                    if (move.learn_method === 'machine') {\n                        const machineEntry = moveDataMap[move.name].machines.find(\n                            (m: any) => m.version_group.name === move.version_group\n                        );\n                        if (machineEntry) {\n                            const { data: machineData } = await axios.get(machineEntry.machine.url);\n                            machine = machineData.item.name;\n                        }\n                    }*/\n\n                    moveDetailsArray.push({\n                        id: id,\n                        name: move.name,\n                        power,\n                        accuracy,\n                        pp,\n                        damage_class,\n                        type,\n                        level_learned_at: move.level_learned_at,\n                        machine: '',\n                        learn_method: move.learn_method,\n                        version_group: move.version_group,\n                        version_group_id: move.version_group_id,\n                    });\n                }\n                //console.log('moveDetailsArray:', moveDetailsArray);\n\n                const finalMoveDetailsArray = moveDetailsArray;\n                \n                setPokemonLearnsets(finalMoveDetailsArray);\n                //console.log('pokemonLearnsets after setting:', pokemonLearnsets);\n                //console.log('final:', finalMoveDetailsArray);\n            } catch (error) {\n                console.error('Error fetching PokÃ©mon details:', error);\n            }\n        };\n\n        fetchPokemonForm();\n    }, [id]);\n\n    \n\n    useEffect(() => {\n       //console.log('pokemonLearnsets:', pokemonLearnsets);\n    }, [pokemonLearnsets]);\n\n    if (!pokemonForm || !pokemonSpecies) {\n        return <div>Loading...</div>;\n    }\n\n\n    return (\n        <Container>\n            <h1>\n                {pokemonSpecies.name.charAt(0).toUpperCase() + pokemonSpecies.name.slice(1)} - #{String(pokemonSpecies.nationalDexNumber).padStart(3, '0')}\n            </h1>\n            <p>\n                {pokemonSpecies.generation} - {pokemonSpecies.genus}\n            </p>\n\n            <Tabs defaultActiveKey=\"info\" className=\"mb-3\">\n                <Tab eventKey=\"info\" title=\"Info\">\n                    <PokemonBasicInfo form={pokemonForm} species={pokemonSpecies} />\n                </Tab>\n                <Tab eventKey=\"learnset\" title=\"Learnset\">\n                    <PokemonLearnset moves={pokemonLearnsets}/>\n                </Tab>\n                <Tab eventKey=\"locations\" title=\"Locations\">\n                    <PokemonLocations />\n                </Tab>\n                <Tab eventKey=\"sprites\" title=\"Sprites\">\n                    <PokemonSprites sprites={pokemonForm.sprites} />\n                </Tab>\n                <Tab eventKey=\"entries\" title=\"Entries\">\n                    <PokemonEntries entries={pokemonSpecies.flavor_text_entries} />\n                </Tab>\n            </Tabs>\n        </Container>\n    );\n};\n\nexport default PokemonDetail;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}